#!/bin/sh
# postrm script for service-runtime
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package

docker_image_prefix=intel/service_runtime:
#docker_image_prefix=nvbox.bj.intel.com:5000/service_runtime:
docker_image_tag=/opt/intel/service_runtime/docker_image_tag
docker_image_origin_prefix=service_runtime:

case "$1" in
    upgrade|failed-upgrade)
    if [ -e ${docker_image_tag}.old ]; then
        tag_new=$(cat ${docker_image_tag})
        tag_old=$(cat ${docker_image_tag}.old)
        if [ "$tag_new" != "$tag_old" ]; then
            if docker inspect ${docker_image_prefix}${tag_new}; then
                echo "image exist"
            else
                docker pull ${docker_image_prefix}${tag_new}
            fi
            systemctl stop service-runtime
            sleep 3
            docker rmi ${docker_image_prefix}${tag_old} \
                || docker rmi ${docker_image_origin_prefix}${tag_old} \
                || true
        fi
        rm ${docker_image_tag}.old
    fi
    ;;
    purge|remove|abort-install|abort-upgrade|disappear)
    ;;

    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
